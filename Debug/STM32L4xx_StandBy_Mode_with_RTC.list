
STM32L4xx_StandBy_Mode_with_RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000261c  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080027a8  080027a8  000127a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e8  080027e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027e8  080027e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e8  080027e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000054  2000000c  080027fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  080027fc  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a11  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c03  00000000  00000000  00029a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000988  00000000  00000000  0002b650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008a0  00000000  00000000  0002bfd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f927  00000000  00000000  0002c878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a3b8  00000000  00000000  0004c19f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bed38  00000000  00000000  00056557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011528f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002500  00000000  00000000  001152e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08002790 	.word	0x08002790

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08002790 	.word	0x08002790

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fa82 	bl	80006da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f84f 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f91d 	bl	8000418 <MX_GPIO_Init>
  MX_RNG_Init();
 80001de:	f000 f8ab 	bl	8000338 <MX_RNG_Init>
  MX_RTC_Init();
 80001e2:	f000 f8bd 	bl	8000360 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80001e6:	4b22      	ldr	r3, [pc, #136]	; (8000270 <main+0xa4>)
 80001e8:	221f      	movs	r2, #31
 80001ea:	619a      	str	r2, [r3, #24]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80001ec:	4b21      	ldr	r3, [pc, #132]	; (8000274 <main+0xa8>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	68db      	ldr	r3, [r3, #12]
 80001f2:	b2da      	uxtb	r2, r3
 80001f4:	4b1f      	ldr	r3, [pc, #124]	; (8000274 <main+0xa8>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80001fc:	60da      	str	r2, [r3, #12]
	for (int x = 0; x < 4; x++) {
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e00c      	b.n	800021e <main+0x52>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8000204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800020c:	f000 fd92 	bl	8000d34 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 8000210:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000214:	f000 fad6 	bl	80007c4 <HAL_Delay>
	for (int x = 0; x < 4; x++) {
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	3301      	adds	r3, #1
 800021c:	60fb      	str	r3, [r7, #12]
 800021e:	68fb      	ldr	r3, [r7, #12]
 8000220:	2b03      	cmp	r3, #3
 8000222:	ddef      	ble.n	8000204 <main+0x38>
	}
	int timeSleep = 10;
 8000224:	230a      	movs	r3, #10
 8000226:	607b      	str	r3, [r7, #4]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, timeSleep, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2204      	movs	r2, #4
 800022c:	4619      	mov	r1, r3
 800022e:	4811      	ldr	r0, [pc, #68]	; (8000274 <main+0xa8>)
 8000230:	f002 f9be 	bl	80025b0 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <main+0x72>
		Error_Handler();
 800023a:	f000 f939 	bl	80004b0 <Error_Handler>
	HAL_Delay(3000);
 800023e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000242:	f000 fabf 	bl	80007c4 <HAL_Delay>

	for (int x = 0; x < 4; x++) {
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
 800024a:	e00b      	b.n	8000264 <main+0x98>
		HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 800024c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000254:	f000 fd6e 	bl	8000d34 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000258:	2064      	movs	r0, #100	; 0x64
 800025a:	f000 fab3 	bl	80007c4 <HAL_Delay>
	for (int x = 0; x < 4; x++) {
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	3301      	adds	r3, #1
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	2b03      	cmp	r3, #3
 8000268:	ddf0      	ble.n	800024c <main+0x80>
	}
	HAL_PWR_EnterSTANDBYMode();
 800026a:	f000 fd8d 	bl	8000d88 <HAL_PWR_EnterSTANDBYMode>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026e:	e7fe      	b.n	800026e <main+0xa2>
 8000270:	40007000 	.word	0x40007000
 8000274:	20000038 	.word	0x20000038

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b096      	sub	sp, #88	; 0x58
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	f107 0314 	add.w	r3, r7, #20
 8000282:	2244      	movs	r2, #68	; 0x44
 8000284:	2100      	movs	r1, #0
 8000286:	4618      	mov	r0, r3
 8000288:	f002 fa7a 	bl	8002780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028c:	463b      	mov	r3, r7
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
 8000298:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800029a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029e:	f000 fd9b 	bl	8000dd8 <HAL_PWREx_ControlVoltageScaling>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a8:	f000 f902 	bl	80004b0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002ac:	f000 fd5c 	bl	8000d68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <SystemClock_Config+0xbc>)
 80002b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80002b6:	4a1f      	ldr	r2, [pc, #124]	; (8000334 <SystemClock_Config+0xbc>)
 80002b8:	f023 0318 	bic.w	r3, r3, #24
 80002bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80002c0:	2306      	movs	r3, #6
 80002c2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002c4:	2301      	movs	r3, #1
 80002c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80002cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80002da:	2301      	movs	r3, #1
 80002dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80002de:	230a      	movs	r3, #10
 80002e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80002e2:	2307      	movs	r3, #7
 80002e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e6:	2302      	movs	r3, #2
 80002e8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ea:	2302      	movs	r3, #2
 80002ec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f000 fdc6 	bl	8000e84 <HAL_RCC_OscConfig>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002fe:	f000 f8d7 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	230f      	movs	r3, #15
 8000304:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000306:	2303      	movs	r3, #3
 8000308:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000316:	463b      	mov	r3, r7
 8000318:	2104      	movs	r1, #4
 800031a:	4618      	mov	r0, r3
 800031c:	f001 f9c6 	bl	80016ac <HAL_RCC_ClockConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000326:	f000 f8c3 	bl	80004b0 <Error_Handler>
  }
}
 800032a:	bf00      	nop
 800032c:	3758      	adds	r7, #88	; 0x58
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000

08000338 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <MX_RNG_Init+0x20>)
 800033e:	4a07      	ldr	r2, [pc, #28]	; (800035c <MX_RNG_Init+0x24>)
 8000340:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	; (8000358 <MX_RNG_Init+0x20>)
 8000344:	f001 fe86 	bl	8002054 <HAL_RNG_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800034e:	f000 f8af 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000028 	.word	0x20000028
 800035c:	50060800 	.word	0x50060800

08000360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000374:	2300      	movs	r3, #0
 8000376:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000378:	4b25      	ldr	r3, [pc, #148]	; (8000410 <MX_RTC_Init+0xb0>)
 800037a:	4a26      	ldr	r2, [pc, #152]	; (8000414 <MX_RTC_Init+0xb4>)
 800037c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800037e:	4b24      	ldr	r3, [pc, #144]	; (8000410 <MX_RTC_Init+0xb0>)
 8000380:	2200      	movs	r2, #0
 8000382:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000384:	4b22      	ldr	r3, [pc, #136]	; (8000410 <MX_RTC_Init+0xb0>)
 8000386:	227f      	movs	r2, #127	; 0x7f
 8000388:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800038a:	4b21      	ldr	r3, [pc, #132]	; (8000410 <MX_RTC_Init+0xb0>)
 800038c:	22ff      	movs	r2, #255	; 0xff
 800038e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000390:	4b1f      	ldr	r3, [pc, #124]	; (8000410 <MX_RTC_Init+0xb0>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000396:	4b1e      	ldr	r3, [pc, #120]	; (8000410 <MX_RTC_Init+0xb0>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800039c:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <MX_RTC_Init+0xb0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003a2:	4b1b      	ldr	r3, [pc, #108]	; (8000410 <MX_RTC_Init+0xb0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003a8:	4819      	ldr	r0, [pc, #100]	; (8000410 <MX_RTC_Init+0xb0>)
 80003aa:	f001 feaa 	bl	8002102 <HAL_RTC_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80003b4:	f000 f87c 	bl	80004b0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003b8:	2300      	movs	r3, #0
 80003ba:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80003bc:	2300      	movs	r3, #0
 80003be:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003c4:	2300      	movs	r3, #0
 80003c6:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	2201      	movs	r2, #1
 80003d0:	4619      	mov	r1, r3
 80003d2:	480f      	ldr	r0, [pc, #60]	; (8000410 <MX_RTC_Init+0xb0>)
 80003d4:	f001 ff10 	bl	80021f8 <HAL_RTC_SetTime>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80003de:	f000 f867 	bl	80004b0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003e2:	2301      	movs	r3, #1
 80003e4:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003e6:	2301      	movs	r3, #1
 80003e8:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80003ea:	2301      	movs	r3, #1
 80003ec:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003f2:	463b      	mov	r3, r7
 80003f4:	2201      	movs	r2, #1
 80003f6:	4619      	mov	r1, r3
 80003f8:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_RTC_Init+0xb0>)
 80003fa:	f001 ff9a 	bl	8002332 <HAL_RTC_SetDate>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8000404:	f000 f854 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	3718      	adds	r7, #24
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000038 	.word	0x20000038
 8000414:	40002800 	.word	0x40002800

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b088      	sub	sp, #32
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 030c 	add.w	r3, r7, #12
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <MX_GPIO_Init+0x94>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	4a1e      	ldr	r2, [pc, #120]	; (80004ac <MX_GPIO_Init+0x94>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <MX_GPIO_Init+0x94>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	f003 0304 	and.w	r3, r3, #4
 8000442:	60bb      	str	r3, [r7, #8]
 8000444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000446:	4b19      	ldr	r3, [pc, #100]	; (80004ac <MX_GPIO_Init+0x94>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a18      	ldr	r2, [pc, #96]	; (80004ac <MX_GPIO_Init+0x94>)
 800044c:	f043 0301 	orr.w	r3, r3, #1
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b16      	ldr	r3, [pc, #88]	; (80004ac <MX_GPIO_Init+0x94>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	607b      	str	r3, [r7, #4]
 800045c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800045e:	4b13      	ldr	r3, [pc, #76]	; (80004ac <MX_GPIO_Init+0x94>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a12      	ldr	r2, [pc, #72]	; (80004ac <MX_GPIO_Init+0x94>)
 8000464:	f043 0302 	orr.w	r3, r3, #2
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b10      	ldr	r3, [pc, #64]	; (80004ac <MX_GPIO_Init+0x94>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0302 	and.w	r3, r3, #2
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8000476:	2200      	movs	r2, #0
 8000478:	f44f 7180 	mov.w	r1, #256	; 0x100
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f000 fc40 	bl	8000d04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8000484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000488:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800048a:	2301      	movs	r3, #1
 800048c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000492:	2300      	movs	r3, #0
 8000494:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8000496:	f107 030c 	add.w	r3, r7, #12
 800049a:	4619      	mov	r1, r3
 800049c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004a0:	f000 fac6 	bl	8000a30 <HAL_GPIO_Init>

}
 80004a4:	bf00      	nop
 80004a6:	3720      	adds	r7, #32
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40021000 	.word	0x40021000

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	e7fe      	b.n	80004b8 <Error_Handler+0x8>
	...

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <HAL_MspInit+0x44>)
 80004c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004c6:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <HAL_MspInit+0x44>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6613      	str	r3, [r2, #96]	; 0x60
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <HAL_MspInit+0x44>)
 80004d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <HAL_MspInit+0x44>)
 80004dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004de:	4a08      	ldr	r2, [pc, #32]	; (8000500 <HAL_MspInit+0x44>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e4:	6593      	str	r3, [r2, #88]	; 0x58
 80004e6:	4b06      	ldr	r3, [pc, #24]	; (8000500 <HAL_MspInit+0x44>)
 80004e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b098      	sub	sp, #96	; 0x60
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800050c:	f107 030c 	add.w	r3, r7, #12
 8000510:	2254      	movs	r2, #84	; 0x54
 8000512:	2100      	movs	r1, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f002 f933 	bl	8002780 <memset>
  if(hrng->Instance==RNG)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4a19      	ldr	r2, [pc, #100]	; (8000584 <HAL_RNG_MspInit+0x80>)
 8000520:	4293      	cmp	r3, r2
 8000522:	d12a      	bne.n	800057a <HAL_RNG_MspInit+0x76>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000524:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000528:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 800052a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800052e:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000530:	2302      	movs	r3, #2
 8000532:	613b      	str	r3, [r7, #16]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000534:	2301      	movs	r3, #1
 8000536:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000538:	2308      	movs	r3, #8
 800053a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800053c:	2307      	movs	r3, #7
 800053e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8000540:	2304      	movs	r3, #4
 8000542:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000544:	2302      	movs	r3, #2
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8000548:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800054c:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fa96 	bl	8001a84 <HAL_RCCEx_PeriphCLKConfig>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d001      	beq.n	8000562 <HAL_RNG_MspInit+0x5e>
    {
      Error_Handler();
 800055e:	f7ff ffa7 	bl	80004b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <HAL_RNG_MspInit+0x84>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000566:	4a08      	ldr	r2, [pc, #32]	; (8000588 <HAL_RNG_MspInit+0x84>)
 8000568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800056c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056e:	4b06      	ldr	r3, [pc, #24]	; (8000588 <HAL_RNG_MspInit+0x84>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000572:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800057a:	bf00      	nop
 800057c:	3760      	adds	r7, #96	; 0x60
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	50060800 	.word	0x50060800
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b098      	sub	sp, #96	; 0x60
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2254      	movs	r2, #84	; 0x54
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f002 f8ef 	bl	8002780 <memset>
  if(hrtc->Instance==RTC)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <HAL_RTC_MspInit+0x68>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d11f      	bne.n	80005ec <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80005ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005b0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80005b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 fa61 	bl	8001a84 <HAL_RCCEx_PeriphCLKConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80005c8:	f7ff ff72 	bl	80004b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80005cc:	4b0a      	ldr	r3, [pc, #40]	; (80005f8 <HAL_RTC_MspInit+0x6c>)
 80005ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005d2:	4a09      	ldr	r2, [pc, #36]	; (80005f8 <HAL_RTC_MspInit+0x6c>)
 80005d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80005dc:	2200      	movs	r2, #0
 80005de:	2100      	movs	r1, #0
 80005e0:	2003      	movs	r0, #3
 80005e2:	f000 f9ee 	bl	80009c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80005e6:	2003      	movs	r0, #3
 80005e8:	f000 fa07 	bl	80009fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005ec:	bf00      	nop
 80005ee:	3760      	adds	r7, #96	; 0x60
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	40002800 	.word	0x40002800
 80005f8:	40021000 	.word	0x40021000

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <NMI_Handler+0x4>

08000602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <HardFault_Handler+0x4>

08000608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <MemManage_Handler+0x4>

0800060e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000612:	e7fe      	b.n	8000612 <BusFault_Handler+0x4>

08000614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000618:	e7fe      	b.n	8000618 <UsageFault_Handler+0x4>

0800061a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061a:	b480      	push	{r7}
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800061e:	bf00      	nop
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr

08000636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000648:	f000 f89c 	bl	8000784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800064c:	bf00      	nop
 800064e:	bd80      	pop	{r7, pc}

08000650 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <RTC_WKUP_IRQHandler+0x10>)
 8000656:	f002 f83f 	bl	80026d8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000038 	.word	0x20000038

08000664 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <SystemInit+0x20>)
 800066a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800066e:	4a05      	ldr	r2, [pc, #20]	; (8000684 <SystemInit+0x20>)
 8000670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800068c:	f7ff ffea 	bl	8000664 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000692:	490d      	ldr	r1, [pc, #52]	; (80006c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000694:	4a0d      	ldr	r2, [pc, #52]	; (80006cc <LoopForever+0xe>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000698:	e002      	b.n	80006a0 <LoopCopyDataInit>

0800069a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800069a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800069c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069e:	3304      	adds	r3, #4

080006a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a4:	d3f9      	bcc.n	800069a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006a8:	4c0a      	ldr	r4, [pc, #40]	; (80006d4 <LoopForever+0x16>)
  movs r3, #0
 80006aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ac:	e001      	b.n	80006b2 <LoopFillZerobss>

080006ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006b0:	3204      	adds	r2, #4

080006b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b4:	d3fb      	bcc.n	80006ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b6:	f002 f83f 	bl	8002738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ba:	f7ff fd87 	bl	80001cc <main>

080006be <LoopForever>:

LoopForever:
    b LoopForever
 80006be:	e7fe      	b.n	80006be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006c0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006cc:	080027f0 	.word	0x080027f0
  ldr r2, =_sbss
 80006d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006d4:	20000060 	.word	0x20000060

080006d8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006d8:	e7fe      	b.n	80006d8 <ADC1_IRQHandler>

080006da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006da:	b580      	push	{r7, lr}
 80006dc:	b082      	sub	sp, #8
 80006de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80006e0:	2300      	movs	r3, #0
 80006e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006e4:	2003      	movs	r0, #3
 80006e6:	f000 f961 	bl	80009ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80006ea:	200f      	movs	r0, #15
 80006ec:	f000 f80e 	bl	800070c <HAL_InitTick>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d002      	beq.n	80006fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	71fb      	strb	r3, [r7, #7]
 80006fa:	e001      	b.n	8000700 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80006fc:	f7ff fede 	bl	80004bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000700:	79fb      	ldrb	r3, [r7, #7]
}
 8000702:	4618      	mov	r0, r3
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
	...

0800070c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000714:	2300      	movs	r3, #0
 8000716:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <HAL_InitTick+0x6c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d023      	beq.n	8000768 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <HAL_InitTick+0x70>)
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	4b14      	ldr	r3, [pc, #80]	; (8000778 <HAL_InitTick+0x6c>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	4619      	mov	r1, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800072e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000732:	fbb2 f3f3 	udiv	r3, r2, r3
 8000736:	4618      	mov	r0, r3
 8000738:	f000 f96d 	bl	8000a16 <HAL_SYSTICK_Config>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10f      	bne.n	8000762 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b0f      	cmp	r3, #15
 8000746:	d809      	bhi.n	800075c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000748:	2200      	movs	r2, #0
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	f04f 30ff 	mov.w	r0, #4294967295
 8000750:	f000 f937 	bl	80009c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000754:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <HAL_InitTick+0x74>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	6013      	str	r3, [r2, #0]
 800075a:	e007      	b.n	800076c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800075c:	2301      	movs	r3, #1
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e004      	b.n	800076c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000762:	2301      	movs	r3, #1
 8000764:	73fb      	strb	r3, [r7, #15]
 8000766:	e001      	b.n	800076c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000768:	2301      	movs	r3, #1
 800076a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800076c:	7bfb      	ldrb	r3, [r7, #15]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3710      	adds	r7, #16
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000008 	.word	0x20000008
 800077c:	20000000 	.word	0x20000000
 8000780:	20000004 	.word	0x20000004

08000784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <HAL_IncTick+0x20>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	461a      	mov	r2, r3
 800078e:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <HAL_IncTick+0x24>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4413      	add	r3, r2
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <HAL_IncTick+0x24>)
 8000796:	6013      	str	r3, [r2, #0]
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000008 	.word	0x20000008
 80007a8:	2000005c 	.word	0x2000005c

080007ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <HAL_GetTick+0x14>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	2000005c 	.word	0x2000005c

080007c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007cc:	f7ff ffee 	bl	80007ac <HAL_GetTick>
 80007d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80007dc:	d005      	beq.n	80007ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80007de:	4b0a      	ldr	r3, [pc, #40]	; (8000808 <HAL_Delay+0x44>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	461a      	mov	r2, r3
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	4413      	add	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80007ea:	bf00      	nop
 80007ec:	f7ff ffde 	bl	80007ac <HAL_GetTick>
 80007f0:	4602      	mov	r2, r0
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d8f7      	bhi.n	80007ec <HAL_Delay+0x28>
  {
  }
}
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	20000008 	.word	0x20000008

0800080c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f003 0307 	and.w	r3, r3, #7
 800081a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 800081e:	68db      	ldr	r3, [r3, #12]
 8000820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000828:	4013      	ands	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800083c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800083e:	4a04      	ldr	r2, [pc, #16]	; (8000850 <__NVIC_SetPriorityGrouping+0x44>)
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	60d3      	str	r3, [r2, #12]
}
 8000844:	bf00      	nop
 8000846:	3714      	adds	r7, #20
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000858:	4b04      	ldr	r3, [pc, #16]	; (800086c <__NVIC_GetPriorityGrouping+0x18>)
 800085a:	68db      	ldr	r3, [r3, #12]
 800085c:	0a1b      	lsrs	r3, r3, #8
 800085e:	f003 0307 	and.w	r3, r3, #7
}
 8000862:	4618      	mov	r0, r3
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	e000ed00 	.word	0xe000ed00

08000870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800087a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800087e:	2b00      	cmp	r3, #0
 8000880:	db0b      	blt.n	800089a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	f003 021f 	and.w	r2, r3, #31
 8000888:	4907      	ldr	r1, [pc, #28]	; (80008a8 <__NVIC_EnableIRQ+0x38>)
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	095b      	lsrs	r3, r3, #5
 8000890:	2001      	movs	r0, #1
 8000892:	fa00 f202 	lsl.w	r2, r0, r2
 8000896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800089a:	bf00      	nop
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	e000e100 	.word	0xe000e100

080008ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	6039      	str	r1, [r7, #0]
 80008b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	db0a      	blt.n	80008d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	490c      	ldr	r1, [pc, #48]	; (80008f8 <__NVIC_SetPriority+0x4c>)
 80008c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ca:	0112      	lsls	r2, r2, #4
 80008cc:	b2d2      	uxtb	r2, r2
 80008ce:	440b      	add	r3, r1
 80008d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d4:	e00a      	b.n	80008ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	4908      	ldr	r1, [pc, #32]	; (80008fc <__NVIC_SetPriority+0x50>)
 80008dc:	79fb      	ldrb	r3, [r7, #7]
 80008de:	f003 030f 	and.w	r3, r3, #15
 80008e2:	3b04      	subs	r3, #4
 80008e4:	0112      	lsls	r2, r2, #4
 80008e6:	b2d2      	uxtb	r2, r2
 80008e8:	440b      	add	r3, r1
 80008ea:	761a      	strb	r2, [r3, #24]
}
 80008ec:	bf00      	nop
 80008ee:	370c      	adds	r7, #12
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000900:	b480      	push	{r7}
 8000902:	b089      	sub	sp, #36	; 0x24
 8000904:	af00      	add	r7, sp, #0
 8000906:	60f8      	str	r0, [r7, #12]
 8000908:	60b9      	str	r1, [r7, #8]
 800090a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	f1c3 0307 	rsb	r3, r3, #7
 800091a:	2b04      	cmp	r3, #4
 800091c:	bf28      	it	cs
 800091e:	2304      	movcs	r3, #4
 8000920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	3304      	adds	r3, #4
 8000926:	2b06      	cmp	r3, #6
 8000928:	d902      	bls.n	8000930 <NVIC_EncodePriority+0x30>
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	3b03      	subs	r3, #3
 800092e:	e000      	b.n	8000932 <NVIC_EncodePriority+0x32>
 8000930:	2300      	movs	r3, #0
 8000932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	43da      	mvns	r2, r3
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	401a      	ands	r2, r3
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000948:	f04f 31ff 	mov.w	r1, #4294967295
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	fa01 f303 	lsl.w	r3, r1, r3
 8000952:	43d9      	mvns	r1, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000958:	4313      	orrs	r3, r2
         );
}
 800095a:	4618      	mov	r0, r3
 800095c:	3724      	adds	r7, #36	; 0x24
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
	...

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	3b01      	subs	r3, #1
 8000974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000978:	d301      	bcc.n	800097e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097a:	2301      	movs	r3, #1
 800097c:	e00f      	b.n	800099e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <SysTick_Config+0x40>)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	3b01      	subs	r3, #1
 8000984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000986:	210f      	movs	r1, #15
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f7ff ff8e 	bl	80008ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000990:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <SysTick_Config+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000996:	4b04      	ldr	r3, [pc, #16]	; (80009a8 <SysTick_Config+0x40>)
 8000998:	2207      	movs	r2, #7
 800099a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800099c:	2300      	movs	r3, #0
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	e000e010 	.word	0xe000e010

080009ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff ff29 	bl	800080c <__NVIC_SetPriorityGrouping>
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b086      	sub	sp, #24
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	4603      	mov	r3, r0
 80009ca:	60b9      	str	r1, [r7, #8]
 80009cc:	607a      	str	r2, [r7, #4]
 80009ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009d4:	f7ff ff3e 	bl	8000854 <__NVIC_GetPriorityGrouping>
 80009d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	68b9      	ldr	r1, [r7, #8]
 80009de:	6978      	ldr	r0, [r7, #20]
 80009e0:	f7ff ff8e 	bl	8000900 <NVIC_EncodePriority>
 80009e4:	4602      	mov	r2, r0
 80009e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ea:	4611      	mov	r1, r2
 80009ec:	4618      	mov	r0, r3
 80009ee:	f7ff ff5d 	bl	80008ac <__NVIC_SetPriority>
}
 80009f2:	bf00      	nop
 80009f4:	3718      	adds	r7, #24
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	4603      	mov	r3, r0
 8000a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff ff31 	bl	8000870 <__NVIC_EnableIRQ>
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a1e:	6878      	ldr	r0, [r7, #4]
 8000a20:	f7ff ffa2 	bl	8000968 <SysTick_Config>
 8000a24:	4603      	mov	r3, r0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b087      	sub	sp, #28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a3e:	e148      	b.n	8000cd2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	2101      	movs	r1, #1
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	fa01 f303 	lsl.w	r3, r1, r3
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	f000 813a 	beq.w	8000ccc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d005      	beq.n	8000a70 <HAL_GPIO_Init+0x40>
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f003 0303 	and.w	r3, r3, #3
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d130      	bne.n	8000ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	689b      	ldr	r3, [r3, #8]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	2203      	movs	r2, #3
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4013      	ands	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	68da      	ldr	r2, [r3, #12]
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	693a      	ldr	r2, [r7, #16]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	685b      	ldr	r3, [r3, #4]
 8000aba:	091b      	lsrs	r3, r3, #4
 8000abc:	f003 0201 	and.w	r2, r3, #1
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b03      	cmp	r3, #3
 8000adc:	d017      	beq.n	8000b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	68db      	ldr	r3, [r3, #12]
 8000ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	2203      	movs	r2, #3
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	689a      	ldr	r2, [r3, #8]
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	005b      	lsls	r3, r3, #1
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	2b02      	cmp	r3, #2
 8000b18:	d123      	bne.n	8000b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	08da      	lsrs	r2, r3, #3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3208      	adds	r2, #8
 8000b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	220f      	movs	r2, #15
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	f003 0307 	and.w	r3, r3, #7
 8000b48:	009b      	lsls	r3, r3, #2
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	08da      	lsrs	r2, r3, #3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	3208      	adds	r2, #8
 8000b5c:	6939      	ldr	r1, [r7, #16]
 8000b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2203      	movs	r2, #3
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	43db      	mvns	r3, r3
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4013      	ands	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f003 0203 	and.w	r2, r3, #3
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8094 	beq.w	8000ccc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ba4:	4b52      	ldr	r3, [pc, #328]	; (8000cf0 <HAL_GPIO_Init+0x2c0>)
 8000ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba8:	4a51      	ldr	r2, [pc, #324]	; (8000cf0 <HAL_GPIO_Init+0x2c0>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6613      	str	r3, [r2, #96]	; 0x60
 8000bb0:	4b4f      	ldr	r3, [pc, #316]	; (8000cf0 <HAL_GPIO_Init+0x2c0>)
 8000bb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60bb      	str	r3, [r7, #8]
 8000bba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bbc:	4a4d      	ldr	r2, [pc, #308]	; (8000cf4 <HAL_GPIO_Init+0x2c4>)
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	089b      	lsrs	r3, r3, #2
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	f003 0303 	and.w	r3, r3, #3
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	220f      	movs	r2, #15
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000be6:	d00d      	beq.n	8000c04 <HAL_GPIO_Init+0x1d4>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a43      	ldr	r2, [pc, #268]	; (8000cf8 <HAL_GPIO_Init+0x2c8>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d007      	beq.n	8000c00 <HAL_GPIO_Init+0x1d0>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a42      	ldr	r2, [pc, #264]	; (8000cfc <HAL_GPIO_Init+0x2cc>)
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	d101      	bne.n	8000bfc <HAL_GPIO_Init+0x1cc>
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	e004      	b.n	8000c06 <HAL_GPIO_Init+0x1d6>
 8000bfc:	2307      	movs	r3, #7
 8000bfe:	e002      	b.n	8000c06 <HAL_GPIO_Init+0x1d6>
 8000c00:	2301      	movs	r3, #1
 8000c02:	e000      	b.n	8000c06 <HAL_GPIO_Init+0x1d6>
 8000c04:	2300      	movs	r3, #0
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	f002 0203 	and.w	r2, r2, #3
 8000c0c:	0092      	lsls	r2, r2, #2
 8000c0e:	4093      	lsls	r3, r2
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c16:	4937      	ldr	r1, [pc, #220]	; (8000cf4 <HAL_GPIO_Init+0x2c4>)
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	089b      	lsrs	r3, r3, #2
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c24:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c48:	4a2d      	ldr	r2, [pc, #180]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c4e:	4b2c      	ldr	r3, [pc, #176]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d003      	beq.n	8000c72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c72:	4a23      	ldr	r2, [pc, #140]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	4013      	ands	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d003      	beq.n	8000c9c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000c9c:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ca2:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43db      	mvns	r3, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	f47f aeaf 	bne.w	8000a40 <HAL_GPIO_Init+0x10>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	bf00      	nop
 8000ce6:	371c      	adds	r7, #28
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010000 	.word	0x40010000
 8000cf8:	48000400 	.word	0x48000400
 8000cfc:	48000800 	.word	0x48000800
 8000d00:	40010400 	.word	0x40010400

08000d04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
 8000d10:	4613      	mov	r3, r2
 8000d12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d14:	787b      	ldrb	r3, [r7, #1]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d1a:	887a      	ldrh	r2, [r7, #2]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d22:	887a      	ldrh	r2, [r7, #2]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	695b      	ldr	r3, [r3, #20]
 8000d44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	041a      	lsls	r2, r3, #16
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	43d9      	mvns	r1, r3
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	400b      	ands	r3, r1
 8000d56:	431a      	orrs	r2, r3
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	619a      	str	r2, [r3, #24]
}
 8000d5c:	bf00      	nop
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	40007000 	.word	0x40007000

08000d88 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f023 0307 	bic.w	r3, r3, #7
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8000d96:	f043 0303 	orr.w	r3, r3, #3
 8000d9a:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000d9e:	691b      	ldr	r3, [r3, #16]
 8000da0:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <HAL_PWR_EnterSTANDBYMode+0x30>)
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 8000da8:	bf30      	wfi
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40007000 	.word	0x40007000
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dc0:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000de6:	d130      	bne.n	8000e4a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de8:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df4:	d038      	beq.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df6:	4b20      	ldr	r3, [pc, #128]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dfe:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e00:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e04:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e06:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2232      	movs	r2, #50	; 0x32
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e12:	fba2 2303 	umull	r2, r3, r2, r3
 8000e16:	0c9b      	lsrs	r3, r3, #18
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e1c:	e002      	b.n	8000e24 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	3b01      	subs	r3, #1
 8000e22:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e30:	d102      	bne.n	8000e38 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1f2      	bne.n	8000e1e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e38:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e44:	d110      	bne.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e46:	2303      	movs	r3, #3
 8000e48:	e00f      	b.n	8000e6a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e56:	d007      	beq.n	8000e68 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e58:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e60:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e66:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e68:	2300      	movs	r3, #0
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3714      	adds	r7, #20
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40007000 	.word	0x40007000
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d102      	bne.n	8000e98 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	f000 bc02 	b.w	800169c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e98:	4b96      	ldr	r3, [pc, #600]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	f003 030c 	and.w	r3, r3, #12
 8000ea0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ea2:	4b94      	ldr	r3, [pc, #592]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	f003 0303 	and.w	r3, r3, #3
 8000eaa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0310 	and.w	r3, r3, #16
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80e4 	beq.w	8001082 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d007      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x4c>
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	2b0c      	cmp	r3, #12
 8000ec4:	f040 808b 	bne.w	8000fde <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	f040 8087 	bne.w	8000fde <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ed0:	4b88      	ldr	r3, [pc, #544]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0302 	and.w	r3, r3, #2
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <HAL_RCC_OscConfig+0x64>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e3d9      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1a      	ldr	r2, [r3, #32]
 8000eec:	4b81      	ldr	r3, [pc, #516]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <HAL_RCC_OscConfig+0x7e>
 8000ef8:	4b7e      	ldr	r3, [pc, #504]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f00:	e005      	b.n	8000f0e <HAL_RCC_OscConfig+0x8a>
 8000f02:	4b7c      	ldr	r3, [pc, #496]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f08:	091b      	lsrs	r3, r3, #4
 8000f0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d223      	bcs.n	8000f5a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6a1b      	ldr	r3, [r3, #32]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 fd54 	bl	80019c4 <RCC_SetFlashLatencyFromMSIRange>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e3ba      	b.n	800169c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f26:	4b73      	ldr	r3, [pc, #460]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a72      	ldr	r2, [pc, #456]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f2c:	f043 0308 	orr.w	r3, r3, #8
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b70      	ldr	r3, [pc, #448]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a1b      	ldr	r3, [r3, #32]
 8000f3e:	496d      	ldr	r1, [pc, #436]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f40:	4313      	orrs	r3, r2
 8000f42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69db      	ldr	r3, [r3, #28]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	4968      	ldr	r1, [pc, #416]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f54:	4313      	orrs	r3, r2
 8000f56:	604b      	str	r3, [r1, #4]
 8000f58:	e025      	b.n	8000fa6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f5a:	4b66      	ldr	r3, [pc, #408]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a65      	ldr	r2, [pc, #404]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b63      	ldr	r3, [pc, #396]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6a1b      	ldr	r3, [r3, #32]
 8000f72:	4960      	ldr	r1, [pc, #384]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f74:	4313      	orrs	r3, r2
 8000f76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f78:	4b5e      	ldr	r3, [pc, #376]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	495b      	ldr	r1, [pc, #364]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d109      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a1b      	ldr	r3, [r3, #32]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fd14 	bl	80019c4 <RCC_SetFlashLatencyFromMSIRange>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e37a      	b.n	800169c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fa6:	f000 fc81 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8000faa:	4602      	mov	r2, r0
 8000fac:	4b51      	ldr	r3, [pc, #324]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	091b      	lsrs	r3, r3, #4
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	4950      	ldr	r1, [pc, #320]	; (80010f8 <HAL_RCC_OscConfig+0x274>)
 8000fb8:	5ccb      	ldrb	r3, [r1, r3]
 8000fba:	f003 031f 	and.w	r3, r3, #31
 8000fbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc2:	4a4e      	ldr	r2, [pc, #312]	; (80010fc <HAL_RCC_OscConfig+0x278>)
 8000fc4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fc6:	4b4e      	ldr	r3, [pc, #312]	; (8001100 <HAL_RCC_OscConfig+0x27c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fb9e 	bl	800070c <HAL_InitTick>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d052      	beq.n	8001080 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	e35e      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d032      	beq.n	800104c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a42      	ldr	r2, [pc, #264]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ff2:	f7ff fbdb 	bl	80007ac <HAL_GetTick>
 8000ff6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ff8:	e008      	b.n	800100c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ffa:	f7ff fbd7 	bl	80007ac <HAL_GetTick>
 8000ffe:	4602      	mov	r2, r0
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	2b02      	cmp	r3, #2
 8001006:	d901      	bls.n	800100c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001008:	2303      	movs	r3, #3
 800100a:	e347      	b.n	800169c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800100c:	4b39      	ldr	r3, [pc, #228]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0302 	and.w	r3, r3, #2
 8001014:	2b00      	cmp	r3, #0
 8001016:	d0f0      	beq.n	8000ffa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001018:	4b36      	ldr	r3, [pc, #216]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a35      	ldr	r2, [pc, #212]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 800101e:	f043 0308 	orr.w	r3, r3, #8
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b33      	ldr	r3, [pc, #204]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4930      	ldr	r1, [pc, #192]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001032:	4313      	orrs	r3, r2
 8001034:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001036:	4b2f      	ldr	r3, [pc, #188]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	492b      	ldr	r1, [pc, #172]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001046:	4313      	orrs	r3, r2
 8001048:	604b      	str	r3, [r1, #4]
 800104a:	e01a      	b.n	8001082 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800104c:	4b29      	ldr	r3, [pc, #164]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001052:	f023 0301 	bic.w	r3, r3, #1
 8001056:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001058:	f7ff fba8 	bl	80007ac <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001060:	f7ff fba4 	bl	80007ac <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e314      	b.n	800169c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001072:	4b20      	ldr	r3, [pc, #128]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d1f0      	bne.n	8001060 <HAL_RCC_OscConfig+0x1dc>
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001080:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d073      	beq.n	8001176 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b08      	cmp	r3, #8
 8001092:	d005      	beq.n	80010a0 <HAL_RCC_OscConfig+0x21c>
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2b0c      	cmp	r3, #12
 8001098:	d10e      	bne.n	80010b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	2b03      	cmp	r3, #3
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d063      	beq.n	8001174 <HAL_RCC_OscConfig+0x2f0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d15f      	bne.n	8001174 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e2f1      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x24c>
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a0b      	ldr	r2, [pc, #44]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e025      	b.n	800111c <HAL_RCC_OscConfig+0x298>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d8:	d114      	bne.n	8001104 <HAL_RCC_OscConfig+0x280>
 80010da:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a02      	ldr	r2, [pc, #8]	; (80010f4 <HAL_RCC_OscConfig+0x270>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e013      	b.n	800111c <HAL_RCC_OscConfig+0x298>
 80010f4:	40021000 	.word	0x40021000
 80010f8:	080027a8 	.word	0x080027a8
 80010fc:	20000000 	.word	0x20000000
 8001100:	20000004 	.word	0x20000004
 8001104:	4ba0      	ldr	r3, [pc, #640]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a9f      	ldr	r2, [pc, #636]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b9d      	ldr	r3, [pc, #628]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a9c      	ldr	r2, [pc, #624]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001124:	f7ff fb42 	bl	80007ac <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fb3e 	bl	80007ac <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e2ae      	b.n	800169c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113e:	4b92      	ldr	r3, [pc, #584]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0x2a8>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fb2e 	bl	80007ac <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fb2a 	bl	80007ac <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e29a      	b.n	800169c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001166:	4b88      	ldr	r3, [pc, #544]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x2d0>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d060      	beq.n	8001244 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d005      	beq.n	8001194 <HAL_RCC_OscConfig+0x310>
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d119      	bne.n	80011c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d116      	bne.n	80011c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001194:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119c:	2b00      	cmp	r3, #0
 800119e:	d005      	beq.n	80011ac <HAL_RCC_OscConfig+0x328>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e277      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ac:	4b76      	ldr	r3, [pc, #472]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	061b      	lsls	r3, r3, #24
 80011ba:	4973      	ldr	r1, [pc, #460]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011c0:	e040      	b.n	8001244 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d023      	beq.n	8001212 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ca:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fae9 	bl	80007ac <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011de:	f7ff fae5 	bl	80007ac <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e255      	b.n	800169c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f0:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fc:	4b62      	ldr	r3, [pc, #392]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	691b      	ldr	r3, [r3, #16]
 8001208:	061b      	lsls	r3, r3, #24
 800120a:	495f      	ldr	r1, [pc, #380]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800120c:	4313      	orrs	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
 8001210:	e018      	b.n	8001244 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800121c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121e:	f7ff fac5 	bl	80007ac <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001224:	e008      	b.n	8001238 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001226:	f7ff fac1 	bl	80007ac <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d901      	bls.n	8001238 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001234:	2303      	movs	r3, #3
 8001236:	e231      	b.n	800169c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001238:	4b53      	ldr	r3, [pc, #332]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0308 	and.w	r3, r3, #8
 800124c:	2b00      	cmp	r3, #0
 800124e:	d03c      	beq.n	80012ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01c      	beq.n	8001292 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001258:	4b4b      	ldr	r3, [pc, #300]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800125a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125e:	4a4a      	ldr	r2, [pc, #296]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff faa0 	bl	80007ac <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fa9c 	bl	80007ac <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e20c      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0ef      	beq.n	8001270 <HAL_RCC_OscConfig+0x3ec>
 8001290:	e01b      	b.n	80012ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001292:	4b3d      	ldr	r3, [pc, #244]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001298:	4a3b      	ldr	r2, [pc, #236]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a2:	f7ff fa83 	bl	80007ac <HAL_GetTick>
 80012a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a8:	e008      	b.n	80012bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012aa:	f7ff fa7f 	bl	80007ac <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	2b02      	cmp	r3, #2
 80012b6:	d901      	bls.n	80012bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012b8:	2303      	movs	r3, #3
 80012ba:	e1ef      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80012be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1ef      	bne.n	80012aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80a6 	beq.w	8001424 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012dc:	4b2a      	ldr	r3, [pc, #168]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80012de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d10d      	bne.n	8001304 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80012ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6593      	str	r3, [r2, #88]	; 0x58
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 80012f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001300:	2301      	movs	r3, #1
 8001302:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001304:	4b21      	ldr	r3, [pc, #132]	; (800138c <HAL_RCC_OscConfig+0x508>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d118      	bne.n	8001342 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001310:	4b1e      	ldr	r3, [pc, #120]	; (800138c <HAL_RCC_OscConfig+0x508>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a1d      	ldr	r2, [pc, #116]	; (800138c <HAL_RCC_OscConfig+0x508>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131c:	f7ff fa46 	bl	80007ac <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001324:	f7ff fa42 	bl	80007ac <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e1b2      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_RCC_OscConfig+0x508>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f0      	beq.n	8001324 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_RCC_OscConfig+0x4d8>
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800134c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001350:	4a0d      	ldr	r2, [pc, #52]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800135a:	e029      	b.n	80013b0 <HAL_RCC_OscConfig+0x52c>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	2b05      	cmp	r3, #5
 8001362:	d115      	bne.n	8001390 <HAL_RCC_OscConfig+0x50c>
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136a:	4a07      	ldr	r2, [pc, #28]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 8001376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137a:	4a03      	ldr	r2, [pc, #12]	; (8001388 <HAL_RCC_OscConfig+0x504>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001384:	e014      	b.n	80013b0 <HAL_RCC_OscConfig+0x52c>
 8001386:	bf00      	nop
 8001388:	40021000 	.word	0x40021000
 800138c:	40007000 	.word	0x40007000
 8001390:	4b9a      	ldr	r3, [pc, #616]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001396:	4a99      	ldr	r2, [pc, #612]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a0:	4b96      	ldr	r3, [pc, #600]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a6:	4a95      	ldr	r2, [pc, #596]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d016      	beq.n	80013e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff f9f8 	bl	80007ac <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff f9f4 	bl	80007ac <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e162      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013d6:	4b89      	ldr	r3, [pc, #548]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ed      	beq.n	80013c0 <HAL_RCC_OscConfig+0x53c>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff f9e1 	bl	80007ac <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff f9dd 	bl	80007ac <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e14b      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001404:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ed      	bne.n	80013ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001418:	4b78      	ldr	r3, [pc, #480]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a77      	ldr	r2, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 800141e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b00      	cmp	r3, #0
 800142e:	d03c      	beq.n	80014aa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01c      	beq.n	8001472 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001438:	4b70      	ldr	r3, [pc, #448]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 800143a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800143e:	4a6f      	ldr	r2, [pc, #444]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff f9b0 	bl	80007ac <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001450:	f7ff f9ac 	bl	80007ac <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e11c      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001462:	4b66      	ldr	r3, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ef      	beq.n	8001450 <HAL_RCC_OscConfig+0x5cc>
 8001470:	e01b      	b.n	80014aa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001472:	4b62      	ldr	r3, [pc, #392]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001478:	4a60      	ldr	r2, [pc, #384]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff f993 	bl	80007ac <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800148a:	f7ff f98f 	bl	80007ac <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e0ff      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800149c:	4b57      	ldr	r3, [pc, #348]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 800149e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ef      	bne.n	800148a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80f3 	beq.w	800169a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	f040 80c9 	bne.w	8001650 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014be:	4b4f      	ldr	r3, [pc, #316]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0203 	and.w	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d12c      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014dc:	3b01      	subs	r3, #1
 80014de:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d123      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d11b      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d113      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150e:	085b      	lsrs	r3, r3, #1
 8001510:	3b01      	subs	r3, #1
 8001512:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001514:	429a      	cmp	r2, r3
 8001516:	d109      	bne.n	800152c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	085b      	lsrs	r3, r3, #1
 8001524:	3b01      	subs	r3, #1
 8001526:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001528:	429a      	cmp	r2, r3
 800152a:	d06b      	beq.n	8001604 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	2b0c      	cmp	r3, #12
 8001530:	d062      	beq.n	80015f8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0ac      	b.n	800169c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a2d      	ldr	r2, [pc, #180]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001548:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800154c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800154e:	f7ff f92d 	bl	80007ac <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001556:	f7ff f929 	bl	80007ac <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b02      	cmp	r3, #2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e099      	b.n	800169c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1f0      	bne.n	8001556 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 8001576:	68da      	ldr	r2, [r3, #12]
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_RCC_OscConfig+0x77c>)
 800157a:	4013      	ands	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001584:	3a01      	subs	r2, #1
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	4311      	orrs	r1, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800158e:	0212      	lsls	r2, r2, #8
 8001590:	4311      	orrs	r1, r2
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001596:	0852      	lsrs	r2, r2, #1
 8001598:	3a01      	subs	r2, #1
 800159a:	0552      	lsls	r2, r2, #21
 800159c:	4311      	orrs	r1, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015a2:	0852      	lsrs	r2, r2, #1
 80015a4:	3a01      	subs	r2, #1
 80015a6:	0652      	lsls	r2, r2, #25
 80015a8:	4311      	orrs	r1, r2
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015ae:	06d2      	lsls	r2, r2, #27
 80015b0:	430a      	orrs	r2, r1
 80015b2:	4912      	ldr	r1, [pc, #72]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80015b4:	4313      	orrs	r3, r2
 80015b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015b8:	4b10      	ldr	r3, [pc, #64]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0f      	ldr	r2, [pc, #60]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80015be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015c4:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80015ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015d0:	f7ff f8ec 	bl	80007ac <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff f8e8 	bl	80007ac <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e058      	b.n	800169c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <HAL_RCC_OscConfig+0x778>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d0f0      	beq.n	80015d8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015f6:	e050      	b.n	800169a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e04f      	b.n	800169c <HAL_RCC_OscConfig+0x818>
 80015fc:	40021000 	.word	0x40021000
 8001600:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001604:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d144      	bne.n	800169a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001610:	4b24      	ldr	r3, [pc, #144]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a23      	ldr	r2, [pc, #140]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 8001616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800161c:	4b21      	ldr	r3, [pc, #132]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	4a20      	ldr	r2, [pc, #128]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 8001622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001626:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001628:	f7ff f8c0 	bl	80007ac <HAL_GetTick>
 800162c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162e:	e008      	b.n	8001642 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001630:	f7ff f8bc 	bl	80007ac <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b02      	cmp	r3, #2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e02c      	b.n	800169c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x7ac>
 800164e:	e024      	b.n	800169a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d01f      	beq.n	8001696 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001656:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 800165c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001660:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff f8a3 	bl	80007ac <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff f89f 	bl	80007ac <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e00f      	b.n	800169c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001688:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	4905      	ldr	r1, [pc, #20]	; (80016a4 <HAL_RCC_OscConfig+0x820>)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x824>)
 8001690:	4013      	ands	r3, r2
 8001692:	60cb      	str	r3, [r1, #12]
 8001694:	e001      	b.n	800169a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	4618      	mov	r0, r3
 800169e:	3720      	adds	r7, #32
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40021000 	.word	0x40021000
 80016a8:	feeefffc 	.word	0xfeeefffc

080016ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0e7      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c0:	4b75      	ldr	r3, [pc, #468]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d910      	bls.n	80016f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b72      	ldr	r3, [pc, #456]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 0207 	bic.w	r2, r3, #7
 80016d6:	4970      	ldr	r1, [pc, #448]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b6e      	ldr	r3, [pc, #440]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0cf      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d010      	beq.n	800171e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001708:	429a      	cmp	r2, r3
 800170a:	d908      	bls.n	800171e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800170c:	4b63      	ldr	r3, [pc, #396]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4960      	ldr	r1, [pc, #384]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d04c      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b03      	cmp	r3, #3
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001732:	4b5a      	ldr	r3, [pc, #360]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d121      	bne.n	8001782 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e0a6      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b02      	cmp	r3, #2
 8001748:	d107      	bne.n	800175a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800174a:	4b54      	ldr	r3, [pc, #336]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d115      	bne.n	8001782 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e09a      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001762:	4b4e      	ldr	r3, [pc, #312]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d109      	bne.n	8001782 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e08e      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001772:	4b4a      	ldr	r3, [pc, #296]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800177a:	2b00      	cmp	r3, #0
 800177c:	d101      	bne.n	8001782 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e086      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001782:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f023 0203 	bic.w	r2, r3, #3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4943      	ldr	r1, [pc, #268]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	4313      	orrs	r3, r2
 8001792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001794:	f7ff f80a 	bl	80007ac <HAL_GetTick>
 8001798:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179a:	e00a      	b.n	80017b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800179c:	f7ff f806 	bl	80007ac <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e06e      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	4b3a      	ldr	r3, [pc, #232]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 020c 	and.w	r2, r3, #12
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d1eb      	bne.n	800179c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d010      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	4b31      	ldr	r3, [pc, #196]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017dc:	429a      	cmp	r2, r3
 80017de:	d208      	bcs.n	80017f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e0:	4b2e      	ldr	r3, [pc, #184]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	492b      	ldr	r1, [pc, #172]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f2:	4b29      	ldr	r3, [pc, #164]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d210      	bcs.n	8001822 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0207 	bic.w	r2, r3, #7
 8001808:	4923      	ldr	r1, [pc, #140]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_ClockConfig+0x1ec>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d001      	beq.n	8001822 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e036      	b.n	8001890 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	4918      	ldr	r1, [pc, #96]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	4313      	orrs	r3, r2
 800183e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0308 	and.w	r3, r3, #8
 8001848:	2b00      	cmp	r3, #0
 800184a:	d009      	beq.n	8001860 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800184c:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	00db      	lsls	r3, r3, #3
 800185a:	4910      	ldr	r1, [pc, #64]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 800185c:	4313      	orrs	r3, r2
 800185e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001860:	f000 f824 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_ClockConfig+0x1f0>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 030f 	and.w	r3, r3, #15
 8001870:	490b      	ldr	r1, [pc, #44]	; (80018a0 <HAL_RCC_ClockConfig+0x1f4>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	f003 031f 	and.w	r3, r3, #31
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
 800187c:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1f8>)
 800187e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1fc>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe ff41 	bl	800070c <HAL_InitTick>
 800188a:	4603      	mov	r3, r0
 800188c:	72fb      	strb	r3, [r7, #11]

  return status;
 800188e:	7afb      	ldrb	r3, [r7, #11]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40022000 	.word	0x40022000
 800189c:	40021000 	.word	0x40021000
 80018a0:	080027a8 	.word	0x080027a8
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000004 	.word	0x20000004

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b089      	sub	sp, #36	; 0x24
 80018b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ba:	4b3e      	ldr	r3, [pc, #248]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
 80018c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018c4:	4b3b      	ldr	r3, [pc, #236]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0x34>
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	2b0c      	cmp	r3, #12
 80018d8:	d121      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d11e      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018e0:	4b34      	ldr	r3, [pc, #208]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d107      	bne.n	80018fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80018ec:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e005      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80018fc:	4b2d      	ldr	r3, [pc, #180]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001908:	4a2b      	ldr	r2, [pc, #172]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10d      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800191c:	e00a      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	2b04      	cmp	r3, #4
 8001922:	d102      	bne.n	800192a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	e004      	b.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	2b08      	cmp	r3, #8
 800192e:	d101      	bne.n	8001934 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001930:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001932:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d134      	bne.n	80019a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	2b02      	cmp	r3, #2
 8001948:	d003      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0xa6>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d003      	beq.n	8001958 <HAL_RCC_GetSysClockFreq+0xac>
 8001950:	e005      	b.n	800195e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <HAL_RCC_GetSysClockFreq+0x110>)
 8001954:	617b      	str	r3, [r7, #20]
      break;
 8001956:	e005      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001958:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800195a:	617b      	str	r3, [r7, #20]
      break;
 800195c:	e002      	b.n	8001964 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	617b      	str	r3, [r7, #20]
      break;
 8001962:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	3301      	adds	r3, #1
 8001970:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	0a1b      	lsrs	r3, r3, #8
 8001978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800197c:	697a      	ldr	r2, [r7, #20]
 800197e:	fb03 f202 	mul.w	r2, r3, r2
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	fbb2 f3f3 	udiv	r3, r2, r3
 8001988:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800198a:	4b0a      	ldr	r3, [pc, #40]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	0e5b      	lsrs	r3, r3, #25
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	3301      	adds	r3, #1
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019a4:	69bb      	ldr	r3, [r7, #24]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	40021000 	.word	0x40021000
 80019b8:	080027b8 	.word	0x080027b8
 80019bc:	00f42400 	.word	0x00f42400
 80019c0:	007a1200 	.word	0x007a1200

080019c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019cc:	2300      	movs	r3, #0
 80019ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019d0:	4b2a      	ldr	r3, [pc, #168]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019dc:	f7ff f9ee 	bl	8000dbc <HAL_PWREx_GetVoltageRange>
 80019e0:	6178      	str	r0, [r7, #20]
 80019e2:	e014      	b.n	8001a0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	4a24      	ldr	r2, [pc, #144]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019ee:	6593      	str	r3, [r2, #88]	; 0x58
 80019f0:	4b22      	ldr	r3, [pc, #136]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80019fc:	f7ff f9de 	bl	8000dbc <HAL_PWREx_GetVoltageRange>
 8001a00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a02:	4b1e      	ldr	r3, [pc, #120]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	4a1d      	ldr	r2, [pc, #116]	; (8001a7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a14:	d10b      	bne.n	8001a2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b80      	cmp	r3, #128	; 0x80
 8001a1a:	d919      	bls.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2ba0      	cmp	r3, #160	; 0xa0
 8001a20:	d902      	bls.n	8001a28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a22:	2302      	movs	r3, #2
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	e013      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a28:	2301      	movs	r3, #1
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	e010      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b80      	cmp	r3, #128	; 0x80
 8001a32:	d902      	bls.n	8001a3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a34:	2303      	movs	r3, #3
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	e00a      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b80      	cmp	r3, #128	; 0x80
 8001a3e:	d102      	bne.n	8001a46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a40:	2302      	movs	r3, #2
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	e004      	b.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b70      	cmp	r3, #112	; 0x70
 8001a4a:	d101      	bne.n	8001a50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a50:	4b0b      	ldr	r3, [pc, #44]	; (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f023 0207 	bic.w	r2, r3, #7
 8001a58:	4909      	ldr	r1, [pc, #36]	; (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d001      	beq.n	8001a72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3718      	adds	r7, #24
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40022000 	.word	0x40022000

08001a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001a90:	2300      	movs	r3, #0
 8001a92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d031      	beq.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001aa8:	d01a      	beq.n	8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001aaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001aae:	d814      	bhi.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ab8:	d10f      	bne.n	8001ada <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001aba:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4a5c      	ldr	r2, [pc, #368]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ac4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ac6:	e00c      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3304      	adds	r3, #4
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f000 f9ce 	bl	8001e70 <RCCEx_PLLSAI1_Config>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ad8:	e003      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	74fb      	strb	r3, [r7, #19]
      break;
 8001ade:	e000      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ae0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ae2:	7cfb      	ldrb	r3, [r7, #19]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10b      	bne.n	8001b00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ae8:	4b51      	ldr	r3, [pc, #324]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af6:	494e      	ldr	r1, [pc, #312]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001afe:	e001      	b.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b00:	7cfb      	ldrb	r3, [r7, #19]
 8001b02:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 809e 	beq.w	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b16:	4b46      	ldr	r3, [pc, #280]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001b26:	2300      	movs	r3, #0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d00d      	beq.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2c:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	4a3f      	ldr	r2, [pc, #252]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6593      	str	r3, [r2, #88]	; 0x58
 8001b38:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b44:	2301      	movs	r3, #1
 8001b46:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b54:	f7fe fe2a 	bl	80007ac <HAL_GetTick>
 8001b58:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b5a:	e009      	b.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7fe fe26 	bl	80007ac <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d902      	bls.n	8001b70 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	74fb      	strb	r3, [r7, #19]
        break;
 8001b6e:	e005      	b.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b70:	4b30      	ldr	r3, [pc, #192]	; (8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ef      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001b7c:	7cfb      	ldrb	r3, [r7, #19]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d15a      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01e      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d019      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001baa:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bba:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001bca:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d016      	beq.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7fe fde6 	bl	80007ac <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	e00b      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7fe fde2 	bl	80007ac <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d902      	bls.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	74fb      	strb	r3, [r7, #19]
            break;
 8001bfa:	e006      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0ec      	beq.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001c0a:	7cfb      	ldrb	r3, [r7, #19]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c1e:	4904      	ldr	r1, [pc, #16]	; (8001c30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c26:	e009      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c28:	7cfb      	ldrb	r3, [r7, #19]
 8001c2a:	74bb      	strb	r3, [r7, #18]
 8001c2c:	e006      	b.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c38:	7cfb      	ldrb	r3, [r7, #19]
 8001c3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c3c:	7c7b      	ldrb	r3, [r7, #17]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d105      	bne.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c42:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	4a89      	ldr	r2, [pc, #548]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0301 	and.w	r3, r3, #1
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00a      	beq.n	8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c5a:	4b84      	ldr	r3, [pc, #528]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c60:	f023 0203 	bic.w	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4980      	ldr	r1, [pc, #512]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00a      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c7c:	4b7b      	ldr	r3, [pc, #492]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c82:	f023 020c 	bic.w	r2, r3, #12
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	4978      	ldr	r1, [pc, #480]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cac:	496f      	ldr	r1, [pc, #444]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	4967      	ldr	r1, [pc, #412]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cf0:	495e      	ldr	r1, [pc, #376]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d00a      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d04:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	4956      	ldr	r1, [pc, #344]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d26:	4b51      	ldr	r3, [pc, #324]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	494d      	ldr	r1, [pc, #308]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d028      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d48:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4945      	ldr	r1, [pc, #276]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d66:	d106      	bne.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d68:	4b40      	ldr	r3, [pc, #256]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d72:	60d3      	str	r3, [r2, #12]
 8001d74:	e011      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d7e:	d10c      	bne.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3304      	adds	r3, #4
 8001d84:	2101      	movs	r1, #1
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f872 	bl	8001e70 <RCCEx_PLLSAI1_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001d90:	7cfb      	ldrb	r3, [r7, #19]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001d96:	7cfb      	ldrb	r3, [r7, #19]
 8001d98:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d028      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db4:	492d      	ldr	r1, [pc, #180]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001dc4:	d106      	bne.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dc6:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	4a28      	ldr	r2, [pc, #160]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dd0:	60d3      	str	r3, [r2, #12]
 8001dd2:	e011      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ddc:	d10c      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3304      	adds	r3, #4
 8001de2:	2101      	movs	r1, #1
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f843 	bl	8001e70 <RCCEx_PLLSAI1_Config>
 8001dea:	4603      	mov	r3, r0
 8001dec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001dee:	7cfb      	ldrb	r3, [r7, #19]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8001df4:	7cfb      	ldrb	r3, [r7, #19]
 8001df6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d01c      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e04:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e12:	4916      	ldr	r1, [pc, #88]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e22:	d10c      	bne.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3304      	adds	r3, #4
 8001e28:	2102      	movs	r1, #2
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 f820 	bl	8001e70 <RCCEx_PLLSAI1_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8001e3a:	7cfb      	ldrb	r3, [r7, #19]
 8001e3c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e58:	4904      	ldr	r1, [pc, #16]	; (8001e6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001e60:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000

08001e70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e7e:	4b74      	ldr	r3, [pc, #464]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e80:	68db      	ldr	r3, [r3, #12]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d018      	beq.n	8001ebc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001e8a:	4b71      	ldr	r3, [pc, #452]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0203 	and.w	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d10d      	bne.n	8001eb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
       ||
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d009      	beq.n	8001eb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	1c5a      	adds	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
       ||
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d047      	beq.n	8001f46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	73fb      	strb	r3, [r7, #15]
 8001eba:	e044      	b.n	8001f46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d018      	beq.n	8001ef6 <RCCEx_PLLSAI1_Config+0x86>
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d825      	bhi.n	8001f14 <RCCEx_PLLSAI1_Config+0xa4>
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d002      	beq.n	8001ed2 <RCCEx_PLLSAI1_Config+0x62>
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d009      	beq.n	8001ee4 <RCCEx_PLLSAI1_Config+0x74>
 8001ed0:	e020      	b.n	8001f14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001ed2:	4b5f      	ldr	r3, [pc, #380]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d11d      	bne.n	8001f1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee2:	e01a      	b.n	8001f1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001ee4:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d116      	bne.n	8001f1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef4:	e013      	b.n	8001f1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001ef6:	4b56      	ldr	r3, [pc, #344]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f02:	4b53      	ldr	r3, [pc, #332]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d109      	bne.n	8001f22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f12:	e006      	b.n	8001f22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e004      	b.n	8001f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e002      	b.n	8001f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e000      	b.n	8001f24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f22:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f2a:	4b49      	ldr	r3, [pc, #292]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	430b      	orrs	r3, r1
 8001f40:	4943      	ldr	r1, [pc, #268]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d17c      	bne.n	8002046 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f4c:	4b40      	ldr	r3, [pc, #256]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3f      	ldr	r2, [pc, #252]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f58:	f7fe fc28 	bl	80007ac <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f5e:	e009      	b.n	8001f74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f60:	f7fe fc24 	bl	80007ac <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d902      	bls.n	8001f74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	73fb      	strb	r3, [r7, #15]
        break;
 8001f72:	e005      	b.n	8001f80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f74:	4b36      	ldr	r3, [pc, #216]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ef      	bne.n	8001f60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d15f      	bne.n	8002046 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d110      	bne.n	8001fae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001f94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6892      	ldr	r2, [r2, #8]
 8001f9c:	0211      	lsls	r1, r2, #8
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68d2      	ldr	r2, [r2, #12]
 8001fa2:	06d2      	lsls	r2, r2, #27
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	492a      	ldr	r1, [pc, #168]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	610b      	str	r3, [r1, #16]
 8001fac:	e027      	b.n	8001ffe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d112      	bne.n	8001fda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fb4:	4b26      	ldr	r3, [pc, #152]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001fbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6892      	ldr	r2, [r2, #8]
 8001fc4:	0211      	lsls	r1, r2, #8
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6912      	ldr	r2, [r2, #16]
 8001fca:	0852      	lsrs	r2, r2, #1
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	0552      	lsls	r2, r2, #21
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	491f      	ldr	r1, [pc, #124]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	610b      	str	r3, [r1, #16]
 8001fd8:	e011      	b.n	8001ffe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001fe2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	6892      	ldr	r2, [r2, #8]
 8001fea:	0211      	lsls	r1, r2, #8
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	6952      	ldr	r2, [r2, #20]
 8001ff0:	0852      	lsrs	r2, r2, #1
 8001ff2:	3a01      	subs	r2, #1
 8001ff4:	0652      	lsls	r2, r2, #25
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	4915      	ldr	r1, [pc, #84]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001ffe:	4b14      	ldr	r3, [pc, #80]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a13      	ldr	r2, [pc, #76]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002004:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002008:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200a:	f7fe fbcf 	bl	80007ac <HAL_GetTick>
 800200e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002010:	e009      	b.n	8002026 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002012:	f7fe fbcb 	bl	80007ac <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d902      	bls.n	8002026 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	73fb      	strb	r3, [r7, #15]
          break;
 8002024:	e005      	b.n	8002032 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0ef      	beq.n	8002012 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002032:	7bfb      	ldrb	r3, [r7, #15]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002042:	4313      	orrs	r3, r2
 8002044:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002046:	7bfb      	ldrb	r3, [r7, #15]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e049      	b.n	80020fa <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	795b      	ldrb	r3, [r3, #5]
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d105      	bne.n	800207c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fa44 	bl	8000504 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2202      	movs	r2, #2
 8002080:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f042 0204 	orr.w	r2, r2, #4
 8002090:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d104      	bne.n	80020aa <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2204      	movs	r2, #4
 80020a4:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e027      	b.n	80020fa <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80020aa:	f7fe fb7f 	bl	80007ac <HAL_GetTick>
 80020ae:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80020b0:	e015      	b.n	80020de <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80020b2:	f7fe fb7b 	bl	80007ac <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d90e      	bls.n	80020de <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d107      	bne.n	80020de <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2204      	movs	r2, #4
 80020d2:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00d      	b.n	80020fa <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d0e2      	beq.n	80020b2 <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d06c      	beq.n	80021ee <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fa2f 	bl	800058c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2202      	movs	r2, #2
 8002132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	22ca      	movs	r2, #202	; 0xca
 800213c:	625a      	str	r2, [r3, #36]	; 0x24
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2253      	movs	r2, #83	; 0x53
 8002144:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f9a0 	bl	800248c <RTC_EnterInitMode>
 800214c:	4603      	mov	r3, r0
 800214e:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d14b      	bne.n	80021ee <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6812      	ldr	r2, [r2, #0]
 8002160:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002164:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002168:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6899      	ldr	r1, [r3, #8]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	431a      	orrs	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68d2      	ldr	r2, [r2, #12]
 8002190:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	041a      	lsls	r2, r3, #16
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f9a4 	bl	80024f4 <RTC_ExitInitMode>
 80021ac:	4603      	mov	r3, r0
 80021ae:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d11b      	bne.n	80021ee <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0203 	bic.w	r2, r2, #3
 80021c4:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	69da      	ldr	r2, [r3, #28]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	695b      	ldr	r3, [r3, #20]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	22ff      	movs	r2, #255	; 0xff
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021f8:	b590      	push	{r4, r7, lr}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_RTC_SetTime+0x1a>
 800220e:	2302      	movs	r3, #2
 8002210:	e08b      	b.n	800232a <HAL_RTC_SetTime+0x132>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2202      	movs	r2, #2
 800221e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	22ca      	movs	r2, #202	; 0xca
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2253      	movs	r2, #83	; 0x53
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f92a 	bl	800248c <RTC_EnterInitMode>
 8002238:	4603      	mov	r3, r0
 800223a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d163      	bne.n	800230a <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d126      	bne.n	8002296 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2200      	movs	r2, #0
 800225a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f985 	bl	8002570 <RTC_ByteToBcd2>
 8002266:	4603      	mov	r3, r0
 8002268:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	785b      	ldrb	r3, [r3, #1]
 800226e:	4618      	mov	r0, r3
 8002270:	f000 f97e 	bl	8002570 <RTC_ByteToBcd2>
 8002274:	4603      	mov	r3, r0
 8002276:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002278:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	789b      	ldrb	r3, [r3, #2]
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f976 	bl	8002570 <RTC_ByteToBcd2>
 8002284:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002286:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	78db      	ldrb	r3, [r3, #3]
 800228e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002290:	4313      	orrs	r3, r2
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e018      	b.n	80022c8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2200      	movs	r2, #0
 80022a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022b6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022bc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80022d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80022d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	68da      	ldr	r2, [r3, #12]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	431a      	orrs	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	430a      	orrs	r2, r1
 80022fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f8f7 	bl	80024f4 <RTC_ExitInitMode>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d103      	bne.n	8002320 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002328:	7cfb      	ldrb	r3, [r7, #19]
}
 800232a:	4618      	mov	r0, r3
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	bd90      	pop	{r4, r7, pc}

08002332 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002332:	b590      	push	{r4, r7, lr}
 8002334:	b087      	sub	sp, #28
 8002336:	af00      	add	r7, sp, #0
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d101      	bne.n	800234c <HAL_RTC_SetDate+0x1a>
 8002348:	2302      	movs	r3, #2
 800234a:	e075      	b.n	8002438 <HAL_RTC_SetDate+0x106>
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10e      	bne.n	8002380 <HAL_RTC_SetDate+0x4e>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	785b      	ldrb	r3, [r3, #1]
 8002366:	f003 0310 	and.w	r3, r3, #16
 800236a:	2b00      	cmp	r3, #0
 800236c:	d008      	beq.n	8002380 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	785b      	ldrb	r3, [r3, #1]
 8002372:	f023 0310 	bic.w	r3, r3, #16
 8002376:	b2db      	uxtb	r3, r3
 8002378:	330a      	adds	r3, #10
 800237a:	b2da      	uxtb	r2, r3
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11c      	bne.n	80023c0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	78db      	ldrb	r3, [r3, #3]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f8f0 	bl	8002570 <RTC_ByteToBcd2>
 8002390:	4603      	mov	r3, r0
 8002392:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	785b      	ldrb	r3, [r3, #1]
 8002398:	4618      	mov	r0, r3
 800239a:	f000 f8e9 	bl	8002570 <RTC_ByteToBcd2>
 800239e:	4603      	mov	r3, r0
 80023a0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80023a2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	789b      	ldrb	r3, [r3, #2]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f000 f8e1 	bl	8002570 <RTC_ByteToBcd2>
 80023ae:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80023b0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80023ba:	4313      	orrs	r3, r2
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e00e      	b.n	80023de <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	78db      	ldrb	r3, [r3, #3]
 80023c4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	785b      	ldrb	r3, [r3, #1]
 80023ca:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80023cc:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80023d2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	22ca      	movs	r2, #202	; 0xca
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2253      	movs	r2, #83	; 0x53
 80023ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 f84c 	bl	800248c <RTC_EnterInitMode>
 80023f4:	4603      	mov	r3, r0
 80023f6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002408:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800240c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f000 f870 	bl	80024f4 <RTC_ExitInitMode>
 8002414:	4603      	mov	r3, r0
 8002416:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	22ff      	movs	r2, #255	; 0xff
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002436:	7cfb      	ldrb	r3, [r7, #19]
}
 8002438:	4618      	mov	r0, r3
 800243a:	371c      	adds	r7, #28
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68da      	ldr	r2, [r3, #12]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002456:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002458:	f7fe f9a8 	bl	80007ac <HAL_GetTick>
 800245c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800245e:	e009      	b.n	8002474 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002460:	f7fe f9a4 	bl	80007ac <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800246e:	d901      	bls.n	8002474 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e007      	b.n	8002484 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0320 	and.w	r3, r3, #32
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0ee      	beq.n	8002460 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}

0800248c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002494:	2300      	movs	r3, #0
 8002496:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d120      	bne.n	80024e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f04f 32ff 	mov.w	r2, #4294967295
 80024ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80024b0:	f7fe f97c 	bl	80007ac <HAL_GetTick>
 80024b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024b6:	e00d      	b.n	80024d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80024b8:	f7fe f978 	bl	80007ac <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c6:	d905      	bls.n	80024d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2203      	movs	r2, #3
 80024d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <RTC_EnterInitMode+0x5c>
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	d1e7      	bne.n	80024b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024fc:	2300      	movs	r3, #0
 80024fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <RTC_ExitInitMode+0x78>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a19      	ldr	r2, [pc, #100]	; (800256c <RTC_ExitInitMode+0x78>)
 8002506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800250a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800250c:	4b17      	ldr	r3, [pc, #92]	; (800256c <RTC_ExitInitMode+0x78>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d10c      	bne.n	8002532 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff ff91 	bl	8002440 <HAL_RTC_WaitForSynchro>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01e      	beq.n	8002562 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2203      	movs	r2, #3
 8002528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e017      	b.n	8002562 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002532:	4b0e      	ldr	r3, [pc, #56]	; (800256c <RTC_ExitInitMode+0x78>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	4a0d      	ldr	r2, [pc, #52]	; (800256c <RTC_ExitInitMode+0x78>)
 8002538:	f023 0320 	bic.w	r3, r3, #32
 800253c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ff7e 	bl	8002440 <HAL_RTC_WaitForSynchro>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d005      	beq.n	8002556 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2203      	movs	r2, #3
 800254e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <RTC_ExitInitMode+0x78>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	4a04      	ldr	r2, [pc, #16]	; (800256c <RTC_ExitInitMode+0x78>)
 800255c:	f043 0320 	orr.w	r3, r3, #32
 8002560:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002562:	7bfb      	ldrb	r3, [r7, #15]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40002800 	.word	0x40002800

08002570 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800257a:	2300      	movs	r3, #0
 800257c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002582:	e005      	b.n	8002590 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3301      	adds	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800258a:	7afb      	ldrb	r3, [r7, #11]
 800258c:	3b0a      	subs	r3, #10
 800258e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002590:	7afb      	ldrb	r3, [r7, #11]
 8002592:	2b09      	cmp	r3, #9
 8002594:	d8f6      	bhi.n	8002584 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	b2db      	uxtb	r3, r3
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	b2da      	uxtb	r2, r3
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b2db      	uxtb	r3, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e07f      	b.n	80026ca <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2202      	movs	r2, #2
 80025d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	22ca      	movs	r2, #202	; 0xca
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2253      	movs	r2, #83	; 0x53
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800260a:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002616:	2b00      	cmp	r3, #0
 8002618:	d120      	bne.n	800265c <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 800261a:	f7fe f8c7 	bl	80007ac <HAL_GetTick>
 800261e:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 8002620:	e015      	b.n	800264e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002622:	f7fe f8c3 	bl	80007ac <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002630:	d90d      	bls.n	800264e <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	22ff      	movs	r2, #255	; 0xff
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2203      	movs	r2, #3
 800263e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e03d      	b.n	80026ca <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0e2      	beq.n	8002622 <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 0107 	bic.w	r1, r3, #7
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	430a      	orrs	r2, r1
 8002676:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002678:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a15      	ldr	r2, [pc, #84]	; (80026d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800267e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002682:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002684:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800268a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800268e:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269e:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026ae:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	22ff      	movs	r2, #255	; 0xff
 80026b6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40010400 	.word	0x40010400

080026d8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 80026e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80026e6:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	b2da      	uxtb	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002706:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f80b 	bl	8002724 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2201      	movs	r2, #1
 8002712:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40010400 	.word	0x40010400

08002724 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <__libc_init_array>:
 8002738:	b570      	push	{r4, r5, r6, lr}
 800273a:	4d0d      	ldr	r5, [pc, #52]	; (8002770 <__libc_init_array+0x38>)
 800273c:	4c0d      	ldr	r4, [pc, #52]	; (8002774 <__libc_init_array+0x3c>)
 800273e:	1b64      	subs	r4, r4, r5
 8002740:	10a4      	asrs	r4, r4, #2
 8002742:	2600      	movs	r6, #0
 8002744:	42a6      	cmp	r6, r4
 8002746:	d109      	bne.n	800275c <__libc_init_array+0x24>
 8002748:	4d0b      	ldr	r5, [pc, #44]	; (8002778 <__libc_init_array+0x40>)
 800274a:	4c0c      	ldr	r4, [pc, #48]	; (800277c <__libc_init_array+0x44>)
 800274c:	f000 f820 	bl	8002790 <_init>
 8002750:	1b64      	subs	r4, r4, r5
 8002752:	10a4      	asrs	r4, r4, #2
 8002754:	2600      	movs	r6, #0
 8002756:	42a6      	cmp	r6, r4
 8002758:	d105      	bne.n	8002766 <__libc_init_array+0x2e>
 800275a:	bd70      	pop	{r4, r5, r6, pc}
 800275c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002760:	4798      	blx	r3
 8002762:	3601      	adds	r6, #1
 8002764:	e7ee      	b.n	8002744 <__libc_init_array+0xc>
 8002766:	f855 3b04 	ldr.w	r3, [r5], #4
 800276a:	4798      	blx	r3
 800276c:	3601      	adds	r6, #1
 800276e:	e7f2      	b.n	8002756 <__libc_init_array+0x1e>
 8002770:	080027e8 	.word	0x080027e8
 8002774:	080027e8 	.word	0x080027e8
 8002778:	080027e8 	.word	0x080027e8
 800277c:	080027ec 	.word	0x080027ec

08002780 <memset>:
 8002780:	4402      	add	r2, r0
 8002782:	4603      	mov	r3, r0
 8002784:	4293      	cmp	r3, r2
 8002786:	d100      	bne.n	800278a <memset+0xa>
 8002788:	4770      	bx	lr
 800278a:	f803 1b01 	strb.w	r1, [r3], #1
 800278e:	e7f9      	b.n	8002784 <memset+0x4>

08002790 <_init>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	bf00      	nop
 8002794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002796:	bc08      	pop	{r3}
 8002798:	469e      	mov	lr, r3
 800279a:	4770      	bx	lr

0800279c <_fini>:
 800279c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800279e:	bf00      	nop
 80027a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027a2:	bc08      	pop	{r3}
 80027a4:	469e      	mov	lr, r3
 80027a6:	4770      	bx	lr
